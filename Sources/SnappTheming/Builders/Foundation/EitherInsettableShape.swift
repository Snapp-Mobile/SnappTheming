//
//  EitherInsettableShape.swift
//  SnappTheming
//
//  Created by Ilian Konchev on 15.01.25.
//

import SwiftUI

/// A type that conditionally represents one of two insettable shapes.
///
/// `EitherInsettableShape` is useful for cases where you need to switch between two different
/// `InsettableShape` types dynamically, while maintaining a single shape type signature.
///
/// - Parameters:
///   - First: The first shape type conforming to `InsettableShape`.
///   - Second: The second shape type conforming to `InsettableShape`.
public enum EitherInsettableShape<First: InsettableShape, Second: InsettableShape>: InsettableShape {
    /// The first shape option.
    case first(First)

    /// The second shape option.
    case second(Second)

    /// Generates a path for the selected shape.
    ///
    /// - Parameter rect: The bounding rectangle within which the shape should be drawn.
    /// - Returns: The `Path` generated by the currently active shape.
    public func path(in rect: CGRect) -> Path {
        switch self {
        case .first(let first):
            return first.path(in: rect)
        case .second(let second):
            return second.path(in: rect)
        }
    }

    /// Returns an inset version of the shape.
    ///
    /// - Parameter amount: The amount by which to inset the shape.
    /// - Returns: A new `EitherInsettableShape` where the active shape has been inset.
    public func inset(by amount: CGFloat) -> EitherInsettableShape<First.InsetShape, Second.InsetShape> {
        switch self {
        case .first(let first):
            return .first(first.inset(by: amount))
        case .second(let second):
            return .second(second.inset(by: amount))
        }
    }
}
