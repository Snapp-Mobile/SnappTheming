#!/bin/bash

# Get the path to the Codecov JSON file generated by Swift
CODECOV_PATH=$(swift test --enable-code-coverage --show-codecov-path)

echo "ðŸ“„ Full Code Coverage JSON Output:"
# Uncomment to check the raw JSON output
# jq '.' "$CODECOV_PATH"

# Extract target names from filenames containing 'Tests.derived/runner.swift'
TARGET_NAMES=$(jq -r '.data[0].files[] | select(.filename | contains("Tests.derived/runner.swift")) | .filename | split("/")[6] | sub("PackageTests"; "")' "$CODECOV_PATH")

# Initialize a counter for the IDs
id=1

# Initialize the content to be saved in the summary file
summary_content="| ID | Name           | Source Files | Lines        | Coverage                                  |\n"
summary_content+="|----|----------------|--------------|--------------|-------------------------------------------|\n"

# Loop through each target name and calculate line coverage for its files
for target in $TARGET_NAMES; do
  echo "Processing coverage for target: $target"

  # Adjust the target name to get the part before "PackageTests"
  target_name=$(echo "$target" | sed 's/\(.*\)PackageTests/\1/')

  # Extract line coverage data for the specific target's Sources directory
  FILES_LINE_COUNTS=$(jq -r --arg target_name "$target_name" '.data[0].files[] | select(.filename | contains($target_name + "/Sources")) | .summary.lines' "$CODECOV_PATH")

  # Initialize variables for total lines, covered lines, and count
  total_lines=0
  covered_lines=0
  count=0

  # Loop through each file's line count data for the current target
  for lines_data in $FILES_LINE_COUNTS; do
    # Extract total and covered lines for each file
    total=$(echo "$lines_data" | jq '.count')
    covered=$(echo "$lines_data" | jq '.covered')

    # Add to the total lines and covered lines
    total_lines=$((total_lines + total))
    covered_lines=$((covered_lines + covered))
    count=$((count + 1))  # Increment the count of files
  done

  # Calculate the average line coverage percentage
  if [ $total_lines -gt 0 ]; then
    average_coverage=$(echo "scale=6; $covered_lines * 100 / $total_lines" | bc)  # Keep 6 decimal places
  else
    average_coverage=0
  fi

  # Round the final average coverage to 2 decimal places
  average_coverage_rounded=$(echo "$average_coverage" | awk '{print int($1 * 100 + 0.5) / 100}')

  # Generate coverage badge URL
  badge_url="![](https://geps.dev/progress/${average_coverage_rounded})"

  # Append the results for the current target to the summary_content variable
  summary_content+="| $id  | $target_name        | $count       | ($covered_lines/$total_lines) | $badge_url |\n"

  # Increment the ID for the next target
  id=$((id + 1))

  echo "Coverage summary for target '$target_name' saved to summary content"
done

# Save all the collected content to pr_coverage_summary.txt
echo -e "$summary_content" > pr_coverage_summary.txt

echo "Coverage summary generation complete."
