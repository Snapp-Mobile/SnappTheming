const fs = require('fs');
const { getOctokit, context } = require('@actions/github');

async function postCoverageComment() {
    try {
        // Read the coverage report
        const coverageOutput = fs.readFileSync('pr_coverage_summary.txt', 'utf8');

        // Construct the new comment
        const newComment = `
### üõ°Ô∏è Code Coverage Report

${coverageOutput}

_Generated by GitHub Actions._
        `;

        // Initialize Octokit with GitHub token
        const octokit = getOctokit(process.env.GITHUB_TOKEN);

        // Fetch existing PR comments
        const { data: comments } = await octokit.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
        });

        // Identify and delete previous bot comments
        for (const comment of comments) {
            if (comment.body.includes("### üõ°Ô∏è Code Coverage Report")) {
                await octokit.rest.issues.deleteComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id,
                });
            }
        }

        // Create a new PR comment with coverage details
        await octokit.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: newComment,
        });

        console.log("‚úÖ Successfully posted coverage comment.");
    } catch (error) {
        console.error("‚ùå Error posting PR comment:", error);
        process.exit(1);
    }
}

// Run the function
postCoverageComment();
