# This workflow will test a Swift project
 # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

 name: Package Test
 env:
   DESTINATION: 'platform=macOS,variant=Mac Catalyst,name=My Mac'
   SCHEME: 'SnappTheming-Package'
   WORKSPACE_PATH: '.swiftpm/xcode/package.xcworkspace'
   COVERAGE_REPORT_PATH: './coverage/coverage.xcresult'
 on:
   push:
     branches: [ "main" ]
   pull_request:
     branches: [ "main" ]

 jobs:
   build:

     runs-on: macos-latest

     steps:
     - uses: actions/checkout@v2
     - name: List Xcode installations
       run: sudo ls -1 /Applications | grep "Xcode"
     - name: Select Xcode 16.2
       run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
     - name: Test
       run: |
         xcodebuild test \
            -workspace "${{env.WORKSPACE_PATH}}" \
            -scheme "${{env.SCHEME}}" \
            -destination "${{env.DESTINATION}}" \
            -enableCodeCoverage YES \
            -resultBundlePath '${{env.COVERAGE_REPORT_PATH}}' \
            -skipMacroValidation \
            -quiet
        
         echo "Overall Code Coverage:"
         xcrun xccov view --report --only-targets "${{env.COVERAGE_REPORT_PATH}}" | tail -n 2

     - name: Comment on Pull Request
       if: github.event_name == 'pull_request'
       uses: actions/github-script@v6
       with:
         script: |
            const { execSync } = require("child_process");

            // Run the command to get code coverage and store the result
            const coverageOutput = execSync(
            `xcrun xccov view --report --only-targets ${{env.COVERAGE_REPORT_PATH}} | tail -n 1`
            ).toString().trim();

            const overallCoverage = coverageOutput.split(" ")[1]; // Extract the percentage value

            const comment = `
            ### Code Coverage Report
            üõ°Ô∏è **Overall Coverage:** ${overallCoverage}

            _Generated by GitHub Actions._
            `;

            // Create a comment on the pull request
            github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment,
            });

#     - name: Upload coverage report to Codecov
#       uses: codecov/codecov-action@v2
#       with:
#         file: ${{env.COVERAGE_REPORT_PATH}}/CodeCoverage.json
#         token: ${{ secrets.CODECOV_TOKEN }} # TODO: add CODECOV_TOKEN to secrets
