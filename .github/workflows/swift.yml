# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

  name: Swift

  env:
    DESTINATION: 'platform=macOS,variant=Mac Catalyst,name=My Mac'
    WORKSPACE_PATH: '.swiftpm/xcode/package.xcworkspace'

  on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]

  jobs:
    build:

      runs-on: macos-latest

      steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
        fetch-depth: 1 # Fetch only the latest commit for better performance

      # Step 2: List all installed versions of Xcode for debugging purposes
      - name: List Xcode installations
        run: sudo ls -1 /Applications | grep "Xcode"

      # Step 3: Select the desired Xcode version (ensure it's pre-installed on the runner)
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer

      # Step 4: Output the Swift version for confirmation/debugging
      - name: Get swift version
        run: swift --version

      # Step 5: Build and Test with Coverage Enabled
      - name: Build and Test with Coverage
        run: |
          xcodebuild test \
            -workspace '${{env.WORKSPACE_PATH}}' \
            -scheme SnappTheming-Package \
            -destination '${{env.DESTINATION}}' \
            -enableCodeCoverage YES \
            -skipMacroValidation
          mkdir -p '${{env.COVERAGE_OUTPUT}}'

      # Step 6: Export Code Coverage
      - name: Generate Coverage Report
        run: |
          xcrun xccov view --report --json \
              $(find . -name "*.xccovarchive") > '${{env.COVERAGE_OUTPUT}}/coverage.json'
          xcrun xccov view --file --json \
              $(find . -name "*.xccovarchive") > '${{env.COVERAGE_OUTPUT}}/detailed-coverage.json'

      # Step 7: Upload Code Coverage Report as an Artifact (Optional)
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{env.COVERAGE_OUTPUT}}
